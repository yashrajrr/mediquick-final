/**
 * @fileoverview Firestore Security Rules for MediQuick Rx.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user-specific data and allows public read access to certain collections while restricting write access to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores public user profile information, accessible only to the authenticated user with matching ID.
 * - /sellers/{sellerId}: Stores public seller profile information, accessible only to the authenticated user with matching ID.
 * - /doctors/{doctorId}: Stores public doctor profile information.
 * - /appointments/{appointmentId}: Stores appointment details, accessible to the involved customer and doctor.
 * - /prescriptions/{prescriptionId}: Stores prescriptions, accessible to the involved customer and doctor.
 * - /communities/{communityId}/messages/{messageId}: Stores chat messages for a specific community channel, public for all users.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Read-only collections are handled using `allow get, list: if true;`.
 * - Ambiguous relationships default to strict owner-only access.
 *
 * Denormalization for Authorization:
 *  - DoctorId and CustomerId are on the prescription to avoid needing to query.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile information.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get, list, update, delete) - Authenticated user can access their own profile.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // Explicitly disallow listing
      allow create: if isSignedIn() && isOwner(userId) && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to seller profile information.
     * @path /sellers/{sellerId}
     * @allow (create) - Authenticated user can create their own seller profile.
     * @allow (get, list, update, delete) - Authenticated user can access their own seller profile.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the user is not the owner of the profile.
     * @principle Enforces document ownership for all operations.
     */
    match /sellers/{sellerId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(sellerId) {
        return request.auth.uid == sellerId;
      }

      function isExistingOwner(sellerId) {
        return isSignedIn() && isOwner(sellerId) && resource.data != null;
      }

      allow get: if isSignedIn() && isOwner(sellerId);
      allow list: if false; // Explicitly disallow listing
      allow create: if isSignedIn() && isOwner(sellerId) && request.auth.uid == sellerId;
      allow update: if isExistingOwner(sellerId);
      allow delete: if isExistingOwner(sellerId);
    }

    /**
     * @description Controls access to doctor profile information.
     * @path /doctors/{doctorId}
     * @allow (get, list) - Public read access for doctor profiles.
     * @allow (create) - Only authenticated users can create doctor profiles.
     * @allow (update, delete) - Only the owner of the doctor profile can update or delete it.
     * @deny (create) - If the user is not authenticated.
     * @deny (update, delete) - If the user is not the owner of the doctor profile.
     * @principle Allows public read access but restricts write access to owners.
     */
    match /doctors/{doctorId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(doctorId) {
        return isSignedIn() && request.auth.uid == resource.data.uid;
      }

      function isExistingOwner(doctorId) {
        return isOwner(doctorId) && resource.data != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(doctorId);
      allow delete: if isExistingOwner(doctorId);
    }

    /**
     * @description Controls access to appointment information.
     * @path /appointments/{appointmentId}
     * @allow (create) - Authenticated users can create appointments.
     * @allow (get, list) - Only the involved customer or doctor can access the appointment details.
     * @allow (update, delete) - Only the involved customer or doctor can update or delete the appointment.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the user is not the involved customer or doctor.
     * @principle Restricts access to appointments to the involved parties.
     */
    match /appointments/{appointmentId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isParticipant(appointment) {
          return isSignedIn() && (request.auth.uid == appointment.customerId || request.auth.uid == appointment.doctorUid);
      }

      function isExistingParticipant() {
        return isSignedIn() && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.doctorUid);
      }

      allow get: if isSignedIn() && (resource.data.customerId == request.auth.uid || resource.data.doctorUid == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Controls access to prescription information.
     * @path /prescriptions/{prescriptionId}
     * @allow (create) - Authenticated users can create prescriptions.
     * @allow (get, list) - Only the involved customer or doctor can access the prescription details.
     * @allow (update, delete) - Only the involved customer or doctor can update or delete the prescription.
     * @deny (create) - If the user is not authenticated.
     * @deny (get, list, update, delete) - If the user is not the involved customer or doctor.
     */
    match /prescriptions/{prescriptionId} {
      function isSignedIn() {
        return request.auth != null;
      }

     function isParticipant(prescription) {
          return isSignedIn() && (request.auth.uid == prescription.customerId || request.auth.uid == prescription.doctorId);
      }

      function isExistingParticipant() {
        return isSignedIn() && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.doctorId);
      }

      allow get: if isSignedIn() && (resource.data.customerId == request.auth.uid || resource.data.doctorId == request.auth.uid);
      allow list: if false;
      allow create: if isSignedIn();
      allow update: if isExistingParticipant();
      allow delete: if isExistingParticipant();
    }

    /**
     * @description Controls access to chat messages within a community.
     * @path /communities/{communityId}/messages/{messageId}
     * @allow (get, list) - Public read access to all chat messages.
     * @allow (create) - Authenticated users can create chat messages.
     * @deny (update, delete) - No updates or deletes allowed on chat messages.
     * @principle Allows public reading but restricts writes to authenticated users for creation only.
     */
    match /communities/{communityId}/messages/{messageId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
  }
}